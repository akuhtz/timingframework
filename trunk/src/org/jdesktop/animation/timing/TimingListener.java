/**
 * Copyright (c) 2006, Sun Microsystems, Inc
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following 
 *     disclaimer in the documentation and/or other materials provided 
 *     with the distribution.
 *   * Neither the name of the TimingFramework project nor the names of its
 *     contributors may be used to endorse or promote products derived 
 *     from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.jdesktop.animation.timing;

import java.util.EventListener;

/**
 * This interface is implemented by objects wishing to listen to 
 * events generated by a specific TimingController instance.  Events
 * are sent when the timer starts, stops, and repeats.
 *
 * There is some overlap between this interface and {@link TimingTarget
 * TimingTarget}.  The intent is for TimingTarget implementations
 * to be closely related to the actual work of an animation; that
 * object will receive ongoing calls to <code>timingEvent()</code>
 * in addition to the <code>begin()</code> and <code>end)</code>
 * calls.  TimingListener, on the other hand, is lighter weight
 * than TimingTarget, and is intended to be implemented by objects
 * wishing simply to know about a particular animation, without
 * being involved in the actual animation itself.  This is the case,
 * for example, of a listener used to kick off one animation 
 * based on particular occurrences in another animation, such as
 * synchronizing the start of one animation on the stop of another.
 *
 * @see TimingController#addTimingListener(TimingListener)
 * @author Chet
 */
public interface TimingListener extends EventListener {
    
    /**
     * Called when the TimingController object first begins
     */
    public void timerStarted(TimingEvent e);
    
    /**
     * Called when the TimingController object first begins
     */
    public void timerStopped(TimingEvent e);
    
    /**
     * Called when the TimingController object repeates the timing cycle
     */
    public void timerRepeated(TimingEvent e);
    
}
